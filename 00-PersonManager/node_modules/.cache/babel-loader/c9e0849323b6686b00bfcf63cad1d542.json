{"ast":null,"code":"var _jsxFileName = \"/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/src/components/Cockpit/Cockpit.js\";\nimport React, { useEffect, useRef } from 'react';\nimport classes from './Cockpit.css';\nimport AuthContext from '../../context/auth-context';\n\nconst Cockpit = props => {\n  const toggleButtonRef = useRef(null); //Using useEffect to click the toggleButtonRef once it has been initialized\n  // after rendering the JSX.\n\n  useEffect(() => {\n    toggleButtonRef.current.click();\n  }, []); //useEffect takes a function that will be run for \n  // every render cycle \n\n  /*\n  useEffect(() => {\n      console.log('[Cockpit.js] useEffect');\n      //Http request... (mocking an http request that takes 1 second)\n      const timer = setTimeout(() => { \n          alert('Save data to cloud!')\n      }, 3000 )\n      //The function returned by the useEffect will run before the main useEffect\n      // but after the (first) render cycle, so, the next time: as we are using\n      // ´[] as the second parameter, in fact, the function will be executed\n      // before the component is removed.\n      return () => {\n          console.log('[Cockpit.js] cleanup work in useEffect');\n          clearTimeout(timer);  \n      }\n  }, \n  //The second argum ent for useEffect is an array that points to all \n  // the variables and data that is used on the effect. \n  //[props.persons]);\n   //if the effect should be used for multiple fields, those can be added \n  // to the array\n  //[props.persons, props.some-other-value]);\n   \n  //if we pass an empty array as 2nd argument, we instruct react to \n  // that the effect has no dependencies and should be run whenever\n  // one of the dependencies changes.\n  // In this case, as Cockpit has no dependenices, an empty array will \n  // make run only the first time (the default)\n  []);\n   //If you have different effects that depend on different data, \n  // different use Effects can be used linking to different data \n  // (using for that the second argument.)\n  //useEffect(() => {}, [props.someValue])\n  //useEffect(() => {}, [props.somothervalue])\n   useEffect(() => {\n      console.log('[Cockpit.js] 2nd useEffect');\n      return () => {\n          console.log('[Cockpit.js] cleanup work in 2nd useEffect');\n          //useful when you have operations that should be cancelled \n          // before rendering the next time the component.\n      };\n  });\n  */\n\n  const assignedClasses = [];\n  let btnClass = '';\n\n  if (props.showPersons) {\n    btnClass = classes.Red;\n  }\n\n  if (props.personsLength <= 2) {\n    assignedClasses.push(classes.red);\n  }\n\n  if (props.personsLength <= 1) {\n    assignedClasses.push(classes.bold);\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.Cockpit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, props.title), React.createElement(\"p\", {\n    className: assignedClasses.join(' '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"This is really working\"), React.createElement(\"button\", {\n    ref: toggleButtonRef,\n    className: btnClass,\n    onClick: props.clicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Show/Hide persons\"), React.createElement(AuthContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, context => React.createElement(\"button\", {\n    onClick: context.login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Log In\")));\n};\n\nexport default React.memo(Cockpit);","map":{"version":3,"sources":["/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/src/components/Cockpit/Cockpit.js"],"names":["React","useEffect","useRef","classes","AuthContext","Cockpit","props","toggleButtonRef","current","click","assignedClasses","btnClass","showPersons","Red","personsLength","push","red","bold","title","join","clicked","context","login","memo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AAEA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEvB,QAAMC,eAAe,GAAGL,MAAM,CAAC,IAAD,CAA9B,CAFuB,CAIvB;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,eAAe,CAACC,OAAhB,CAAwBC,KAAxB;AACH,GAFQ,EAGP,EAHO,CAAT,CANuB,CAUvB;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,QAAMC,eAAe,GAAG,EAAxB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIL,KAAK,CAACM,WAAV,EAAuB;AACnBD,IAAAA,QAAQ,GAAGR,OAAO,CAACU,GAAnB;AACH;;AAED,MAAIP,KAAK,CAACQ,aAAN,IAAuB,CAA3B,EAA8B;AAC5BJ,IAAAA,eAAe,CAACK,IAAhB,CAAqBZ,OAAO,CAACa,GAA7B;AACD;;AACD,MAAIV,KAAK,CAACQ,aAAN,IAAuB,CAA3B,EAA8B;AAC5BJ,IAAAA,eAAe,CAACK,IAAhB,CAAqBZ,OAAO,CAACc,IAA7B;AACD;;AAED,SACI;AAAK,IAAA,SAAS,EAAEd,OAAO,CAACE,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,KAAK,CAACY,KAAX,CADJ,EAEI;AAAG,IAAA,SAAS,EAAER,eAAe,CAACS,IAAhB,CAAqB,GAArB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ,EAGI;AAAQ,IAAA,GAAG,EAAEZ,eAAb;AACI,IAAA,SAAS,EAAEI,QADf;AAEI,IAAA,OAAO,EAAEL,KAAK,CAACc,OAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHJ,EAMI,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,OAAO,IACJ;AAAQ,IAAA,OAAO,EAAEA,OAAO,CAACC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR,CANJ,CADJ;AAcH,CArFD;;AAuFA,eAAetB,KAAK,CAACuB,IAAN,CAAWlB,OAAX,CAAf","sourcesContent":["import React, { useEffect, useRef } from 'react' \n\nimport classes from './Cockpit.css'\nimport AuthContext from '../../context/auth-context';\n\nconst Cockpit = (props) => {\n\n    const toggleButtonRef = useRef(null);\n\n    //Using useEffect to click the toggleButtonRef once it has been initialized\n    // after rendering the JSX.\n    useEffect(() => {\n        toggleButtonRef.current.click();\n    }\n    , []);\n    //useEffect takes a function that will be run for \n    // every render cycle \n    /*\n    useEffect(() => {\n        console.log('[Cockpit.js] useEffect');\n        //Http request... (mocking an http request that takes 1 second)\n        const timer = setTimeout(() => { \n            alert('Save data to cloud!')\n        }, 3000 )\n        //The function returned by the useEffect will run before the main useEffect\n        // but after the (first) render cycle, so, the next time: as we are using\n        // ´[] as the second parameter, in fact, the function will be executed\n        // before the component is removed.\n        return () => {\n            console.log('[Cockpit.js] cleanup work in useEffect');\n            clearTimeout(timer);  \n        }\n    }, \n    //The second argum ent for useEffect is an array that points to all \n    // the variables and data that is used on the effect. \n    //[props.persons]);\n\n    //if the effect should be used for multiple fields, those can be added \n    // to the array\n   //[props.persons, props.some-other-value]);\n     \n    //if we pass an empty array as 2nd argument, we instruct react to \n    // that the effect has no dependencies and should be run whenever\n    // one of the dependencies changes.\n    // In this case, as Cockpit has no dependenices, an empty array will \n    // make run only the first time (the default)\n    []);\n\n    //If you have different effects that depend on different data, \n    // different use Effects can be used linking to different data \n    // (using for that the second argument.)\n    //useEffect(() => {}, [props.someValue])\n    //useEffect(() => {}, [props.somothervalue])\n\n    useEffect(() => {\n        console.log('[Cockpit.js] 2nd useEffect');\n        return () => {\n            console.log('[Cockpit.js] cleanup work in 2nd useEffect');\n            //useful when you have operations that should be cancelled \n            // before rendering the next time the component.\n        };\n    });\n*/\n    const assignedClasses = [];\n    let btnClass = '';\n    if (props.showPersons) {\n        btnClass = classes.Red;    \n    }\n    \n    if (props.personsLength <= 2) {\n      assignedClasses.push(classes.red);\n    }\n    if (props.personsLength <= 1) {\n      assignedClasses.push(classes.bold);\n    }\n\n    return (\n        <div className={classes.Cockpit}>\n            <h1>{props.title}</h1>\n            <p className={assignedClasses.join(' ')}>This is really working</p>\n            <button ref={toggleButtonRef}\n                className={btnClass}\n                onClick={props.clicked}>Show/Hide persons</button>\n            <AuthContext.Consumer>\n                {context => \n                    <button onClick={context.login}>Log In</button>\n                }\n            </AuthContext.Consumer>\n        </div> \n    );\n};\n\nexport default React.memo(Cockpit);"]},"metadata":{},"sourceType":"module"}