{"ast":null,"code":"var _jsxFileName = \"/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/src/components/Cockpit/Cockpit.js\";\nimport React, { useEffect } from 'react';\nimport classes from './Cockpit.css';\n\nconst Cockpit = props => {\n  //useEffect takes a function that will be run for \n  // every render cycle \n  useEffect(() => {\n    console.log('[Cockpit.js] useEffect'); //Http request... (mocking an http request that takes 1 second)\n\n    setTimeout(() => {\n      alert('Save data to cloud!');\n    }, 1000);\n  }, //The second argum ent for useEffect is an array that points to all \n  // the variables and data that is used on the effect. \n  //[props.persons]);\n  //if the effect should be used for multiple fields, those can be added \n  // to the array\n  //[props.persons, props.some-other-value]);\n  //if we pass an empty array as 2nd argument, we instruct react to \n  // that the effect has no dependencies and should be run whenever\n  // one of the dependencies changes.\n  // In this case, as Cockpit has no dependenices, an empty array will \n  // make run only the first time (the default)\n  []); //If you have different effects that depend on different data, \n  // different use Effects can be used linking to different data \n  // (using for that the second argument.)\n  //useEffect(() => {}, [props.somothervalue])\n\n  const assignedClasses = [];\n  let btnClass = '';\n\n  if (props.showPersons) {\n    btnClass = classes.Red;\n  }\n\n  if (props.persons.length <= 2) {\n    assignedClasses.push(classes.red);\n  }\n\n  if (props.persons.length <= 1) {\n    assignedClasses.push(classes.bold);\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.Cockpit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, props.title), React.createElement(\"p\", {\n    className: assignedClasses.join(' '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"This is really working\"), React.createElement(\"button\", {\n    className: btnClass,\n    onClick: props.clicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Show/Hide persons\"));\n};\n\nexport default Cockpit;","map":{"version":3,"sources":["/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/src/components/Cockpit/Cockpit.js"],"names":["React","useEffect","classes","Cockpit","props","console","log","setTimeout","alert","assignedClasses","btnClass","showPersons","Red","persons","length","push","red","bold","title","join","clicked"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEvB;AACA;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EADY,CAEZ;;AACAC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAAC,qBAAD,CAAL;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GANQ,EAOT;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,IApBS,CAAT,CAJuB,CA0BvB;AACA;AACA;AACA;;AAIA,QAAMC,eAAe,GAAG,EAAxB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIN,KAAK,CAACO,WAAV,EAAuB;AACnBD,IAAAA,QAAQ,GAAGR,OAAO,CAACU,GAAnB;AACH;;AAED,MAAIR,KAAK,CAACS,OAAN,CAAcC,MAAd,IAAwB,CAA5B,EAA+B;AAC7BL,IAAAA,eAAe,CAACM,IAAhB,CAAqBb,OAAO,CAACc,GAA7B;AACD;;AACD,MAAIZ,KAAK,CAACS,OAAN,CAAcC,MAAd,IAAwB,CAA5B,EAA+B;AAC7BL,IAAAA,eAAe,CAACM,IAAhB,CAAqBb,OAAO,CAACe,IAA7B;AACD;;AAED,SACI;AAAK,IAAA,SAAS,EAAEf,OAAO,CAACC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,KAAK,CAACc,KAAX,CADJ,EAEI;AAAG,IAAA,SAAS,EAAET,eAAe,CAACU,IAAhB,CAAqB,GAArB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ,EAGI;AACA,IAAA,SAAS,EAAET,QADX;AAEA,IAAA,OAAO,EAAEN,KAAK,CAACgB,OAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHJ,CADJ;AASH,CAvDD;;AAyDA,eAAejB,OAAf","sourcesContent":["import React, { useEffect } from 'react' \nimport classes from './Cockpit.css'\n\nconst Cockpit = (props) => {\n\n    //useEffect takes a function that will be run for \n    // every render cycle \n    useEffect(() => {\n        console.log('[Cockpit.js] useEffect');\n        //Http request... (mocking an http request that takes 1 second)\n        setTimeout(() => {\n            alert('Save data to cloud!')\n        }, 1000 )\n    }, \n    //The second argum ent for useEffect is an array that points to all \n    // the variables and data that is used on the effect. \n    //[props.persons]);\n\n    //if the effect should be used for multiple fields, those can be added \n    // to the array\n    //[props.persons, props.some-other-value]);\n     \n    //if we pass an empty array as 2nd argument, we instruct react to \n    // that the effect has no dependencies and should be run whenever\n    // one of the dependencies changes.\n    // In this case, as Cockpit has no dependenices, an empty array will \n    // make run only the first time (the default)\n    []);\n\n    //If you have different effects that depend on different data, \n    // different use Effects can be used linking to different data \n    // (using for that the second argument.)\n    //useEffect(() => {}, [props.somothervalue])\n\n\n\n    const assignedClasses = [];\n    let btnClass = '';\n    if (props.showPersons) {\n        btnClass = classes.Red;    \n    }\n    \n    if (props.persons.length <= 2) {\n      assignedClasses.push(classes.red);\n    }\n    if (props.persons.length <= 1) {\n      assignedClasses.push(classes.bold);\n    }\n\n    return (\n        <div className={classes.Cockpit}>\n            <h1>{props.title}</h1>\n            <p className={assignedClasses.join(' ')}>This is really working</p>\n            <button \n            className={btnClass}\n            onClick={props.clicked}>Show/Hide persons</button>\n        </div>\n    );\n};\n\nexport default Cockpit;"]},"metadata":{},"sourceType":"module"}