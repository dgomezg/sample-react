{"ast":null,"code":"var _jsxFileName = \"/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/00-PersonManager/src/components/Persons/Persons.js\";\nimport React, { PureComponent } from 'react';\nimport Person from './Person/Person';\n\nclass Persons extends PureComponent {\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Persons.js] getDerivedStateFromProps');\n  //     return state;\n  // }\n  // componentWillReceiveProps(props) {\n  //     console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n  // shouldComponentUpdate(nextProps, nextState) {\n  //     console.log('[Persons.js] shouldComponentUpdate');\n  //     //Only render if the persons data has actually changed\n  //     return nextProps.persons !== this.props.persons\n  //         || nextProps.changed !== this.props.changed\n  //         || nextProps.clicked !== this.props.clicked;\n  // }\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Persons.js] getSnapshotBeforeUpdate'); //Usually it could be the new scroll coordinates or something like that\n\n    return {\n      message: 'Snapshot!'\n    };\n  } // componentWillUpdate() {        \n  // }\n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    //This is where you can fetch new data from the server\n    // i.e Invoking an HTTP request.\n    console.log('[Persons.js] componentDidUpdate');\n    console.log(snapshot);\n  }\n\n  componentWillUnmount() {\n    //Allows to do clean up when the component removed.\n    console.log('[Persons.js] componentWillUnmont');\n  }\n\n  render() {\n    console.log('[Persons.js] rendering...');\n    return this.props.persons.map((person, index) => {\n      return React.createElement(Person, {\n        key: person.id,\n        clicked: () => this.props.clicked(index),\n        changed: event => this.props.changed(event, person.id),\n        name: person.name,\n        age: person.age,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    });\n  }\n\n}\n\nexport default Persons;","map":{"version":3,"sources":["/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/00-PersonManager/src/components/Persons/Persons.js"],"names":["React","PureComponent","Person","Persons","getSnapshotBeforeUpdate","prevProps","prevState","console","log","message","componentDidUpdate","snapshot","componentWillUnmount","render","props","persons","map","person","index","id","clicked","event","changed","name","age"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAGA,MAAMC,OAAN,SAAsBF,aAAtB,CAAoC;AAChC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAG,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAD0C,CAE1C;;AACA,WAAO;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAP;AACH,GAtB+B,CAwBhC;AACA;;;AAEAC,EAAAA,kBAAkB,CAACL,SAAD,EAAYC,SAAZ,EAAuBK,QAAvB,EAAiC;AAC/C;AACA;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;;AACDK,EAAAA,MAAM,GAAG;AACLN,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WACI,KAAKM,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACtC,aACI,oBAAC,MAAD;AACI,QAAA,GAAG,EAAED,MAAM,CAACE,EADhB;AAEI,QAAA,OAAO,EAAE,MAAM,KAAKL,KAAL,CAAWM,OAAX,CAAmBF,KAAnB,CAFnB;AAGI,QAAA,OAAO,EAAGG,KAAD,IAAW,KAAKP,KAAL,CAAWQ,OAAX,CAAmBD,KAAnB,EAA0BJ,MAAM,CAACE,EAAjC,CAHxB;AAII,QAAA,IAAI,EAAEF,MAAM,CAACM,IAJjB;AAKI,QAAA,GAAG,EAAEN,MAAM,CAACO,GALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AASH,KAVD,CADJ;AAaH;;AArD+B;;AAwDpC,eAAerB,OAAf","sourcesContent":["import React, { PureComponent } from 'react'\nimport Person from './Person/Person';\n\n\nclass Persons extends PureComponent {\n    // static getDerivedStateFromProps(props, state) {\n    //     console.log('[Persons.js] getDerivedStateFromProps');\n    //     return state;\n    // }\n\n    // componentWillReceiveProps(props) {\n    //     console.log('[Persons.js] componentWillReceiveProps', props);\n    // }\n    \n    // shouldComponentUpdate(nextProps, nextState) {\n    //     console.log('[Persons.js] shouldComponentUpdate');\n    //     //Only render if the persons data has actually changed\n    //     return nextProps.persons !== this.props.persons\n    //         || nextProps.changed !== this.props.changed\n    //         || nextProps.clicked !== this.props.clicked;\n    // }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log('[Persons.js] getSnapshotBeforeUpdate');\n        //Usually it could be the new scroll coordinates or something like that\n        return { message: 'Snapshot!' }; \n    }\n\n    // componentWillUpdate() {        \n    // }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //This is where you can fetch new data from the server\n        // i.e Invoking an HTTP request.\n        console.log('[Persons.js] componentDidUpdate'); \n        console.log(snapshot);\n    }\n\n    componentWillUnmount() {\n        //Allows to do clean up when the component removed.\n        console.log('[Persons.js] componentWillUnmont')\n    }\n    render() {\n        console.log('[Persons.js] rendering...')\n        return (\n            this.props.persons.map((person, index) => {\n                return (\n                    <Person\n                        key={person.id}\n                        clicked={() => this.props.clicked(index)}\n                        changed={(event) => this.props.changed(event, person.id)}\n                        name={person.name} \n                        age={person.age}\n                    />\n                );\n            })\n        );\n    };\n}\n\nexport default Persons;"]},"metadata":{},"sourceType":"module"}