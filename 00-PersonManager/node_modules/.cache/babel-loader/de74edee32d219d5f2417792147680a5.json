{"ast":null,"code":"import _defineProperty from \"/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/src/containers/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport classes from './App.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport withClass from '../hoc/withClass';\nimport Aux from '../hoc/Aux';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      persons: [{\n        id: 'asd',\n        name: 'David',\n        age: \"44\"\n      }, {\n        id: 'fdas',\n        name: 'Cris',\n        age: 41\n      }, {\n        id: 'rqwe',\n        name: 'Alonso',\n        age: 7\n      }, {\n        id: 'fsgd',\n        name: 'Helena',\n        age: 4\n      }],\n      showPersons: false,\n      showCockpit: true,\n      changeCounter: 0\n    };\n\n    this.deletePersonHandler = personIndex => {\n      //const persons = this.state.persons.slice();\n      const persons = [...this.state.persons];\n      persons.splice(personIndex, 1);\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.nameChangeHandler = (event, id) => {\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      });\n\n      const person = _objectSpread({}, this.state.persons[personIndex]);\n\n      person.name = event.target.value;\n      const newPersons = [...this.state.persons];\n      newPersons[personIndex] = person;\n      /* This is a bad use of setState when new state depends on current state\n      this.setState({\n        persons: newPersons, \n        //now, this.state could not have the right value\n        // depending on when React decides to invoque the render\n        changeCounter: this.state.changeCounter + 1\n      }); */\n      // When new state depends on current state, use as parameter\n      // a function that receives prevState and props and returns the new state.\n\n      this.setState((prevState, props) => {\n        return {\n          persons: newPersons,\n          //now, prevState is guaranteed to have the right state.\n          changeCounter: prevState.changeCounter + 1\n        };\n      });\n    };\n\n    this.togglePersonsHandler = () => {\n      const doesShow = this.state.showPersons;\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n\n    console.log('[App.js] constructor');\n    /* Former way (and still possible) to initialize state\n    this.state = {\n      persons : [\n        {id:'asd', name: 'David', age: 44},\n        {id:'fdas', name: 'Cris', age: 41},\n        {id:'rqwe', name: 'Alonso', age: 7},\n        {id:'fsgd', name: 'Helena', age: 4}\n      ], \n      showPersons: false\n    }\n    */\n  } // More Modern way to init state\n\n\n  static getDerivedStateFromProps(props, state) {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  }\n\n  componentWillMount() {\n    console.log('[App.js] componentWillMount');\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    //Can be used for performance improvements\n    console.log('[App.js] shouldComponentUpdate');\n    return true;\n  }\n\n  componentDidUpdate() {\n    console.log('[App.js] componentDidUpdate');\n  }\n\n  render() {\n    console.log('[App.js] render');\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Persons, {\n        persons: this.state.persons,\n        clicked: this.deletePersonHandler,\n        changed: this.nameChangeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => {\n        this.setState({\n          showCockpit: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Remove cockpit\"), this.state.showCockpit ? React.createElement(Cockpit, {\n      title: this.props.appTitle,\n      showPersons: this.state.showPersons,\n      personsLength: this.state.persons.length,\n      clicked: this.togglePersonsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }) : null, persons);\n  }\n\n}\n\nexport default withClass(App, classes.App);\n/*\nconst App = props => {\n\n  const [personsState, setPersonsState] = useState({\n    persons : [\n      {name: 'David', age: 44},\n      {name: 'Cris', age: 41},\n      {name: 'Alonso', age: 7},\n      {name: 'Helena', age: 4}\n    ]\n  });\n\n  const [otherState, setOtherState] = useState('some other value')\n  console.log(personsState, otherState);\n\n  const switchNameHandler = () => {\n    let newPersons = [...personsState.persons]\n    newPersons[0].name= \"David G.\"\n    newPersons[1].name=\"Cristina\"\n    newPersons[1].age=40 \n    setPersonsState({persons: newPersons});\n  }\n  \n  return (\n    <div className=\"App\">\n    <h1>Hi, I'm a React App</h1>\n    <p>This is really working</p>\n    <button onClick={switchNameHandler}>Switch name</button>\n\n    <Person name={personsState.persons[0].name} age={personsState.persons[0].age}/>\n    <Person name={personsState.persons[1].name} age={personsState.persons[1].age}/>\n    <Person name={personsState.persons[2].name} age={personsState.persons[2].age}/>\n    <Person name={personsState.persons[3].name} age={personsState.persons[3].age}/>\n  </div>    \n  )\n}\n\nexport default App;\n*/\n\n/*\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Hi, I'm a React App</h1>\n    </div>\n  );\n}\n\nexport default App;\n*/","map":{"version":3,"sources":["/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/src/containers/App.js"],"names":["React","Component","classes","Persons","Cockpit","withClass","Aux","App","constructor","props","state","persons","id","name","age","showPersons","showCockpit","changeCounter","deletePersonHandler","personIndex","splice","setState","nameChangeHandler","event","findIndex","p","person","target","value","newPersons","prevState","togglePersonsHandler","doesShow","console","log","getDerivedStateFromProps","componentWillMount","componentDidMount","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","render","appTitle","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './App.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport withClass from '../hoc/withClass';\nimport Aux from '../hoc/Aux'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    console.log('[App.js] constructor');\n    /* Former way (and still possible) to initialize state\n    this.state = {\n      persons : [\n        {id:'asd', name: 'David', age: 44},\n        {id:'fdas', name: 'Cris', age: 41},\n        {id:'rqwe', name: 'Alonso', age: 7},\n        {id:'fsgd', name: 'Helena', age: 4}\n      ], \n      showPersons: false\n    }\n    */\n  }\n\n  // More Modern way to init state\n  state = {\n    persons : [\n      {id:'asd', name: 'David', age: \"44\"},\n      {id:'fdas', name: 'Cris', age: 41},\n      {id:'rqwe', name: 'Alonso', age: 7},\n      {id:'fsgd', name: 'Helena', age: 4}\n    ], \n    showPersons: false, \n    showCockpit: true, \n    changeCounter: 0\n  }\n  \n  static getDerivedStateFromProps(props, state) {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  }\n\n  componentWillMount() {\n    console.log('[App.js] componentWillMount');\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    //Can be used for performance improvements\n    console.log('[App.js] shouldComponentUpdate');\n    return true;\n  }\n\n  componentDidUpdate() {\n    console.log('[App.js] componentDidUpdate');\n  }\n\n  deletePersonHandler = (personIndex) => {\n    //const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons})\n\n  }  \n\n  nameChangeHandler = (event, id) => {\n\n    const personIndex = this.state.persons.findIndex( p => {\n      return p.id === id;\n    });\n    const person = {...this.state.persons[personIndex]};\n    person.name = event.target.value;\n\n    const newPersons = [...this.state.persons]\n    newPersons[personIndex] = person\n    \n    /* This is a bad use of setState when new state depends on current state\n    this.setState({\n      persons: newPersons, \n      //now, this.state could not have the right value\n      // depending on when React decides to invoque the render\n      changeCounter: this.state.changeCounter + 1\n    }); */\n    // When new state depends on current state, use as parameter\n    // a function that receives prevState and props and returns the new state.\n    this.setState((prevState, props) => {\n      return {\n        persons: newPersons, \n        //now, prevState is guaranteed to have the right state.\n        changeCounter: prevState.changeCounter + 1\n      }\n    });\n  }\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  }\n\n  render() {\n    console.log('[App.js] render');\n    let persons = null;\n    \n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          <Persons \n            persons={this.state.persons}\n            clicked={this.deletePersonHandler}\n            changed={this.nameChangeHandler} />\n        </div> \n      );\n    }\n\n    return (\n      <Aux>\n        <button onClick={() => {\n          this.setState({showCockpit: false});\n        }}>Remove cockpit</button>\n        {this.state.showCockpit ? \n            <Cockpit\n            title={this.props.appTitle}\n            showPersons={this.state.showPersons}\n            personsLength={this.state.persons.length}\n            clicked={this.togglePersonsHandler} />\n          : null\n        }\n        {persons}\n      </Aux>\n    );  \n  }\n}\nexport default withClass(App, classes.App);\n/*\nconst App = props => {\n\n  const [personsState, setPersonsState] = useState({\n    persons : [\n      {name: 'David', age: 44},\n      {name: 'Cris', age: 41},\n      {name: 'Alonso', age: 7},\n      {name: 'Helena', age: 4}\n    ]\n  });\n\n  const [otherState, setOtherState] = useState('some other value')\n  console.log(personsState, otherState);\n\n  const switchNameHandler = () => {\n    let newPersons = [...personsState.persons]\n    newPersons[0].name= \"David G.\"\n    newPersons[1].name=\"Cristina\"\n    newPersons[1].age=40 \n    setPersonsState({persons: newPersons});\n  }\n  \n  return (\n    <div className=\"App\">\n    <h1>Hi, I'm a React App</h1>\n    <p>This is really working</p>\n    <button onClick={switchNameHandler}>Switch name</button>\n\n    <Person name={personsState.persons[0].name} age={personsState.persons[0].age}/>\n    <Person name={personsState.persons[1].name} age={personsState.persons[1].age}/>\n    <Person name={personsState.persons[2].name} age={personsState.persons[2].age}/>\n    <Person name={personsState.persons[3].name} age={personsState.persons[3].age}/>\n  </div>    \n  )\n}\n\nexport default App;\n*/\n\n\n/*\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Hi, I'm a React App</h1>\n    </div>\n  );\n}\n\nexport default App;\n*/"]},"metadata":{},"sourceType":"module"}