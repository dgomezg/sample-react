{"ast":null,"code":"var _jsxFileName = \"/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/src/components/Persons/Persons.js\";\nimport React, { Component } from 'react';\nimport Person from './Person/Person';\n\nclass Persons extends Component {\n  // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Persons.js] getDerivedStateFromProps');\n  //     return state;\n  // }\n  // componentWillReceiveProps(props) {\n  //     console.log('[Persons.js] componentWillReceiveProps', props);\n  // }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[Persons.js] shouldComponentUpdate'); //Only render if the persons data has actually changed\n\n    return nextProps.persons !== this.props.persons || nextProps.changed !== this.props.changed || nextProps.clicked !== this.props.clicked;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('[Persons.js] getSnapshotBeforeUpdate'); //Usually it could be the new scroll coordinates or something like that\n\n    return {\n      message: 'Snapshot!'\n    };\n  } // componentWillUpdate() {        \n  // }\n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    //This is where you can fetch new data from the server\n    // i.e Invoking an HTTP request.\n    console.log('[Persons.js] componentDidUpdate');\n    console.log(snapshot);\n  }\n\n  componentWillUnmount() {\n    //Allows to do clean up when the component removed.\n    console.log('[Persons.js] componentWillUnmont');\n  }\n\n  render() {\n    console.log('[Persons.js] rendering...');\n    return this.props.persons.map((person, index) => {\n      return React.createElement(Person, {\n        key: person.id,\n        clicked: () => this.props.clicked(index),\n        changed: event => this.props.changed(event, person.id),\n        name: person.name,\n        age: person.age,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    });\n  }\n\n}\n\nexport default Persons;","map":{"version":3,"sources":["/Users/davidgomez/projects/sandbox/react/training/react-complete-guide/src/components/Persons/Persons.js"],"names":["React","Component","Person","Persons","shouldComponentUpdate","nextProps","nextState","console","log","persons","props","changed","clicked","getSnapshotBeforeUpdate","prevProps","prevState","message","componentDidUpdate","snapshot","componentWillUnmount","render","map","person","index","id","event","name","age"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAC5B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEAG,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EADwC,CAExC;;AACA,WAAOH,SAAS,CAACI,OAAV,KAAsB,KAAKC,KAAL,CAAWD,OAAjC,IACAJ,SAAS,CAACM,OAAV,KAAsB,KAAKD,KAAL,CAAWC,OADjC,IAEAN,SAAS,CAACO,OAAV,KAAsB,KAAKF,KAAL,CAAWE,OAFxC;AAGH;;AAEDC,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1CR,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAD0C,CAE1C;;AACA,WAAO;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAAP;AACH,GAtB2B,CAwB5B;AACA;;;AAEAC,EAAAA,kBAAkB,CAACH,SAAD,EAAYC,SAAZ,EAAuBG,QAAvB,EAAiC;AAC/C;AACA;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;;AACDY,EAAAA,MAAM,GAAG;AACLb,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAO,KAAKE,KAAL,CAAWD,OAAX,CAAmBY,GAAnB,CAAuB,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC7C,aACE,oBAAC,MAAD;AACE,QAAA,GAAG,EAAED,MAAM,CAACE,EADd;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKd,KAAL,CAAWE,OAAX,CAAmBW,KAAnB,CAFjB;AAGE,QAAA,OAAO,EAAGE,KAAD,IAAW,KAAKf,KAAL,CAAWC,OAAX,CAAmBc,KAAnB,EAA0BH,MAAM,CAACE,EAAjC,CAHtB;AAIE,QAAA,IAAI,EAAEF,MAAM,CAACI,IAJf;AAKE,QAAA,GAAG,EAAEJ,MAAM,CAACK,GALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD,KAVI,CAAP;AAWC;;AAnDuB;;AAsDhC,eAAexB,OAAf","sourcesContent":["import React, { Component } from 'react'\nimport Person from './Person/Person';\n\nclass Persons extends Component {\n    // static getDerivedStateFromProps(props, state) {\n    //     console.log('[Persons.js] getDerivedStateFromProps');\n    //     return state;\n    // }\n\n    // componentWillReceiveProps(props) {\n    //     console.log('[Persons.js] componentWillReceiveProps', props);\n    // }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('[Persons.js] shouldComponentUpdate');\n        //Only render if the persons data has actually changed\n        return nextProps.persons !== this.props.persons\n            || nextProps.changed !== this.props.changed\n            || nextProps.clicked !== this.props.clicked;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log('[Persons.js] getSnapshotBeforeUpdate');\n        //Usually it could be the new scroll coordinates or something like that\n        return { message: 'Snapshot!' }; \n    }\n\n    // componentWillUpdate() {        \n    // }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //This is where you can fetch new data from the server\n        // i.e Invoking an HTTP request.\n        console.log('[Persons.js] componentDidUpdate'); \n        console.log(snapshot);\n    }\n\n    componentWillUnmount() {\n        //Allows to do clean up when the component removed.\n        console.log('[Persons.js] componentWillUnmont')\n    }\n    render() {\n        console.log('[Persons.js] rendering...')\n        return this.props.persons.map((person, index) => {\n            return (\n              <Person\n                key={person.id}\n                clicked={() => this.props.clicked(index)}\n                changed={(event) => this.props.changed(event, person.id)}\n                name={person.name} \n                age={person.age}\n              />\n            );\n          });\n        };\n}\n\nexport default Persons;"]},"metadata":{},"sourceType":"module"}